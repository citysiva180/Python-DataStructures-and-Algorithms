[
    {
        "Managers and Queryset": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Retriving Objects": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Filtering Objects": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Complex Queries": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Using F Objects for References ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Sorting Data using ORM ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Limiting Results using Django ORM ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Selecting Field From Queries  ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "DEFFERING FIELDS  ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Selecting Related Objects": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Aggregate Object ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Annotate Objects ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Database Functions": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Group BY": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Working With Expression Wrappers": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ],
        "Understanding QuerySet Cache ": [
            [
                "1",
                "Managers and Queryset",
                "To get all rows in a table using ORM ",
                "queryset = <TableName>.object.all()",
                "You can iterate or use the list function to display all the data | You can also index the list to display a single or range of rows of data. "
            ],
            [
                "2",
                "Managers and Queryset",
                "To filter results from table ",
                "queryset.filter()",
                "You could chain the filter method with another filter so you could filter from the results you got earlier. It will help in consecutive filtering, like, table of countries, filter 1 country and now, filter its states "
            ],
            [
                "3",
                "Managers and Queryset",
                "Using Order By in Django ORM",
                "queryset.orderby()",
                "You could order your results using the orderby "
            ],
            [
                "4",
                "Managers and Queryset",
                "Getting the count",
                "queryset = <TableName>.object.count()",
                "gets the count in a single row. Note that the returned value is just a single number. Hence further listing is not needed. "
            ]
        ]
    }
]